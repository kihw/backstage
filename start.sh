#!/bin/bash

# Script de d√©marrage pour AI Studio Backstage
# Usage: ./start.sh [dev|prod]

set -e

MODE=${1:-dev}
echo "üé≠ D√©marrage AI Studio Backstage en mode: $MODE"

# V√©rifier les pr√©requis
check_prerequisites() {
    echo "üîç V√©rification des pr√©requis..."
    
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js n'est pas install√©"
        exit 1
    fi
    
    if ! command -v yarn &> /dev/null; then
        echo "‚ùå Yarn n'est pas install√©"
        exit 1
    fi
    
    echo "‚úÖ Pr√©requis v√©rifi√©s"
}

# Installation des d√©pendances
install_dependencies() {
    echo "üì¶ Installation des d√©pendances..."
    
    if [ ! -d "node_modules" ]; then
        yarn install
    else
        echo "üì¶ D√©pendances d√©j√† install√©es"
    fi
}

# Configuration environnement
setup_environment() {
    echo "‚öôÔ∏è Configuration de l'environnement..."
    
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "üìã Fichier .env cr√©√© depuis .env.example"
            echo "‚ö†Ô∏è  Pensez √† configurer vos tokens dans .env"
        else
            echo "‚ö†Ô∏è  Aucun fichier .env.example trouv√©"
        fi
    else
        echo "‚úÖ Fichier .env existant"
    fi
}

# D√©marrage en mode d√©veloppement
start_dev() {
    echo "üöÄ D√©marrage en mode d√©veloppement..."
    echo "üåê Frontend: http://localhost:3100"
    echo "üîô Backend: http://localhost:7007"
    echo ""
    echo "üí° Tips:"
    echo "   - Configurez GITLAB_TOKEN dans .env"
    echo "   - Les services seront d√©couverts automatiquement"
    echo "   - TechDocs disponible sur /docs"
    echo ""
    
    yarn dev
}

# D√©marrage en mode production
start_prod() {
    echo "üè≠ D√©marrage en mode production..."
    
    # Build si n√©cessaire
    if [ ! -d "packages/app/dist" ] || [ ! -d "packages/backend/dist" ]; then
        echo "üî® Build de l'application..."
        yarn build
    fi
    
    # D√©marrage avec Docker
    if command -v docker-compose &> /dev/null; then
        echo "üê≥ D√©marrage avec Docker Compose..."
        docker-compose up -d
        
        echo "‚úÖ Services d√©marr√©s:"
        echo "   üé≠ Backstage: http://localhost:3100"
        echo "   üêò PostgreSQL: localhost:5432"
        echo ""
        echo "üìä Status:"
        docker-compose ps
    else
        echo "‚ùå Docker Compose non disponible"
        echo "üì¶ D√©marrage en mode standalone..."
        yarn start
    fi
}

# Nettoyage
cleanup() {
    echo ""
    echo "üßπ Nettoyage..."
    if [ "$MODE" = "prod" ] && command -v docker-compose &> /dev/null; then
        docker-compose down
    fi
}

# Gestion des signaux
trap cleanup EXIT

# Fonction principale
main() {
    cd "$(dirname "$0")"
    
    check_prerequisites
    install_dependencies
    setup_environment
    
    case $MODE in
        "dev"|"development")
            start_dev
            ;;
        "prod"|"production")
            start_prod
            ;;
        *)
            echo "‚ùå Mode non reconnu: $MODE"
            echo "Usage: $0 [dev|prod]"
            exit 1
            ;;
    esac
}

# Ex√©cution
main "$@"