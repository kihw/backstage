# Script PowerShell pour d√©marrer Backstage avec Node.js 18 dans Docker
# Alternative simple quand Node.js 20 n'est pas disponible localement

param(
    [ValidateSet("dev", "start")]
    [string]$Mode = "dev"
)

Write-Host "üé≠ D√©marrage AI Studio Backstage avec Node.js 18 (Docker)" -ForegroundColor Cyan

# V√©rifier que Docker est disponible
if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Docker n'est pas install√© ou accessible" -ForegroundColor Red
    Write-Host "üí° Installez Docker Desktop depuis https://docker.com" -ForegroundColor Yellow
    exit 1
}

# V√©rifier le fichier .env
if (-not (Test-Path ".env")) {
    Write-Host "‚ö†Ô∏è  Fichier .env manquant" -ForegroundColor Yellow
    Write-Host "üìã Cr√©ation d'un .env basique..." -ForegroundColor Cyan
    
    $envContent = @"
# Token GitLab pour d√©couverte automatique
GITLAB_TOKEN=glpat-LsRZMFkvJq3iLvfltZQVfW86MQp1Ojg5cDdjCw.01.121y2z2lm

# Cl√© secr√®te backend
BACKEND_SECRET=your-super-secret-backend-key-change-this

# Configuration de base
FRONTEND_PORT=3100
BACKEND_PORT=7007
"@
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "‚úÖ Fichier .env cr√©√©" -ForegroundColor Green
}

Write-Host "üê≥ D√©marrage avec conteneur Node.js 18..." -ForegroundColor Yellow

# Commandes selon le mode
switch ($Mode) {
    "dev" {
        Write-Host "üîß Mode d√©veloppement avec hot reload" -ForegroundColor Green
        Write-Host "üåê Frontend: http://localhost:3100" -ForegroundColor Cyan
        Write-Host "üîô Backend: http://localhost:7007" -ForegroundColor Cyan
        Write-Host ""
        
        # Ex√©cuter dans un conteneur Node.js 18 avec volumes mont√©s
        docker run --rm -it `
            --name backstage-dev `
            -v "${PWD}:/app" `
            -w /app `
            -p 3100:3000 `
            -p 7007:7007 `
            --env-file .env `
            node:18-bookworm-slim `
            bash -c "
                apt-get update && apt-get install -y python3 g++ build-essential libsqlite3-dev git &&
                npm config set python /usr/bin/python3 &&
                npm install --legacy-peer-deps &&
                npm run dev
            "
    }
    "start" {
        Write-Host "üöÄ Mode production" -ForegroundColor Green
        
        docker run --rm -it `
            --name backstage-prod `
            -v "${PWD}:/app" `
            -w /app `
            -p 3100:3000 `
            -p 7007:7007 `
            --env-file .env `
            node:18-bookworm-slim `
            bash -c "
                apt-get update && apt-get install -y python3 g++ build-essential libsqlite3-dev git &&
                npm config set python /usr/bin/python3 &&
                npm install --legacy-peer-deps &&
                npm run build &&
                npm start
            "
    }
}

Write-Host ""
Write-Host "üéâ Backstage est maintenant accessible !" -ForegroundColor Green
Write-Host "üìä V√©rifiez que les 29 services sont d√©couverts dans le catalogue" -ForegroundColor Yellow